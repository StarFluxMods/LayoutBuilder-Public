using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using GUINodeEditor;
using Kitchen.Layouts;
using Kitchen.Layouts.Modules;
using UnityEngine;
using XNode;
using Node = GUINodeEditor.Node;

namespace LayoutBuilder.Utility
{
    public static class ConversionUtils
    {
        public static bool SaveScript(string[] scriptLines, string saveDirectory = $"%persistentdatapath%\\UserData\\{Mod.MOD_NAME}\\Scripts", string saveFile = "%graph%")
        {
                        
            string _saveDirectory = saveDirectory;
                        
            _saveDirectory = _saveDirectory.Replace("%profile%", Utils.selectedProfile.name);
            _saveDirectory = _saveDirectory.Replace("%setting%", Utils.selectedSetting.name);
            _saveDirectory = _saveDirectory.Replace("%datapath%", Application.dataPath);
            _saveDirectory = _saveDirectory.Replace("%persistentdatapath%", Application.persistentDataPath);
            _saveDirectory = _saveDirectory.Replace("%desktop%", Environment.GetFolderPath(Environment.SpecialFolder.Desktop));
            _saveDirectory = _saveDirectory.Replace("%documents%", Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments));

            if (!Directory.Exists(_saveDirectory))
            {
                Directory.CreateDirectory(_saveDirectory);
            }

            string _saveFile = saveFile;
                        
            _saveFile = _saveFile.Replace("%profile%", Utils.selectedProfile.name);
            _saveFile = _saveFile.Replace("%setting%", Utils.selectedSetting.name);
            _saveFile = _saveFile.Replace("%graph%", Utils.GraphName);
                        
            if (!_saveFile.EndsWith(".png"))
                _saveFile += ".cs";

            int count = 0;
            string _count = "";
            while (File.Exists(Path.Combine(_saveDirectory, _count + _saveFile)))
            {
                count++;
                _count = count.ToString() + "-";
            }

            File.WriteAllLines(Path.Combine(_saveDirectory, _count + _saveFile), scriptLines);
            return true;
        }

        public static bool ConvertXNodeToGenerativeScript(LayoutGraph graph, out string[] scriptLines)
        {
            List<string> lines = new List<string>();
            
            Dictionary<XNode.Node, string> nodeMap = new Dictionary<XNode.Node, string>();
            
            lines.Add("// This script was generated by Layout Builder");
            
            lines.Add("public static LayoutGraph GenerateLayout(string graphName)");
            lines.Add("{");
            
            lines.Add("    ");
            lines.Add("    // Creating the graph");
            lines.Add("    ");
            
            lines.Add("    LayoutGraph graph = ScriptableObject.CreateInstance<LayoutGraph>();");
            
            lines.Add("    ");
            lines.Add("    // Creating all the nodes");
            lines.Add("    ");
            
            foreach (XNode.Node node in graph.nodes)
            {
                int index = 0;
                string typeString = node.GetType().Name.ToString() + index;
                while (nodeMap.ContainsValue(typeString))
                {
                    index++;
                    typeString = node.GetType().Name.ToString() + index;
                }
                
                nodeMap.Add(node, typeString);
                
                lines.Add($"    {node.GetType().Name} {typeString} = ScriptableObject.CreateInstance<{node.GetType().Name}>();");
            }

            lines.Add("    ");
            lines.Add("    // Setting all the values");
            lines.Add("    ");
            
            foreach (XNode.Node node in graph.nodes)
            {
                foreach (FieldInfo fieldInfo in node.GetType().GetFields())
                {
                    object value = fieldInfo.GetValue(node);
                    if (value == null) continue;
                    if (value.GetType() == typeof(LayoutGraph)) continue;
                    if (value is LayoutGraphConnection) continue;
                    
                    if (value is Enum)
                    {
                        lines.Add($"    {nodeMap[node]}.{fieldInfo.Name} = {value.GetType().Name}.{value};");
                    }
                    else if (value is Vector2 vec2)
                    {
                        lines.Add($"    {nodeMap[node]}.{fieldInfo.Name} = new Vector2({vec2.x}f, {vec2.y});");
                    }
                    else if (value is bool)
                    {
                        lines.Add($"    {nodeMap[node]}.{fieldInfo.Name} = {value.ToString().ToLower()};");
                    }
                    else
                    {
                        lines.Add($"    {nodeMap[node]}.{fieldInfo.Name} = {value};");
                    }
                }
            }

            lines.Add("    ");
            lines.Add("    // Connecting all the nodes");
            lines.Add("    ");
            
            foreach (XNode.Node node in graph.nodes)
            {
                foreach (XNode.NodePort port in node.Ports)
                {
                    if (port.direction == NodePort.IO.Input)
                    {
                        List<XNode.NodePort> connections = port.GetConnections();
                        foreach (XNode.NodePort connection in connections)
                        {
                            if (nodeMap.TryGetValue(connection.node, out string connectedNode))
                            {
                                lines.Add($"    {nodeMap[node]}.GetPort(\"{port.fieldName}\").Connect({connectedNode}.GetPort(\"{connection.fieldName}\"));");
                            }
                        }
                    }
                }
            }

            lines.Add("    ");
            lines.Add("    // Adding all the nodes to the graph and setting the graph");
            lines.Add("    ");

            foreach (string key in nodeMap.Values)
            {
                lines.Add($"    graph.nodes.Add({key});");
                lines.Add($"    {key}.graph = graph;");
            }
            lines.Add("    graph.name = graphName;");
            lines.Add("    ");
            lines.Add("    return graph;");
            lines.Add("}");
            
            scriptLines = lines.ToArray();
            return true;
        }

        public static bool ConvertRuntimeToXNode(NodeEditor editor, out LayoutGraph result)
        {
            result = ScriptableObject.CreateInstance<LayoutGraph>();
            
            Dictionary<Node, XNode.Node> nodeMap = new Dictionary<Node, XNode.Node>();

            foreach (Node node in editor.nodeLogic.nodes)
            {
                Type xnodeType = Utils.keyPairValues.FirstOrDefault(x => x.Value == node.GetType()).Key;
                if (node is IXNodeConvertable convertable)
                {
                    MethodInfo createNewNode = typeof(IXNodeConvertable).GetMethod("ConvertToXNode").MakeGenericMethod(xnodeType);
                
                    LayoutModule layoutModule = createNewNode.Invoke(convertable, null) as LayoutModule;
                
                    layoutModule.graph = result;
                    
                    nodeMap.Add(node, layoutModule);
                
                    result.nodes.Add(layoutModule);
                }
            }
            
            foreach (Node node in editor.nodeLogic.nodes)
            {
                if (!(node is IXNodeConvertable convertable)) continue;

                foreach (DockInput input in node.inputs)
                {
                    if (input.targets.Count == 0) continue;

                    foreach (Dock target in input.targets)
                    {
                        if (nodeMap.TryGetValue(target.node, out XNode.Node xNode))
                        {
                            XNode.NodePort port = xNode.GetPort(target.name);
                            XNode.NodePort localPort = nodeMap[node].GetPort(input.name);
                            port.Connect(localPort);
                        }
                        else
                        {
                            return false;
                        }
                        
                    }
                }
            }
            
            result.name = Utils.GraphName;

            return true;
        }

        public static int ConvertXNodeToRuntime(LayoutGraph xNodeGraph, NodeEditor editor)
        {
            int result = 0;
            Dictionary<XNode.Node, Node> nodeMap = new Dictionary<XNode.Node, Node>();
            
            foreach (XNode.Node node in xNodeGraph.nodes)
            {
                if (!Utils.keyPairValues.TryGetValue(node.GetType(), out Type runtimeType)) continue;
                MethodInfo createNewWindow = typeof(NodeEditor).GetMethod("CreateNewWindow").MakeGenericMethod(runtimeType);
                
                Node runtimeNode = (Node) createNewWindow.Invoke(editor, new object[] {node.position, false});
                IXNodeConvertable convertable = (IXNodeConvertable) runtimeNode;
                
                nodeMap.Add(node, runtimeNode);

                convertable.LoadValuesFromXNode(node);
            }

            foreach (XNode.Node node in xNodeGraph.nodes)
            {
                if (node is not LayoutModule layoutModule) continue;
                if (nodeMap.TryGetValue(layoutModule, out Node runtimeNode))
                {
                    foreach (XNode.NodePort localPort in layoutModule.Ports)
                    {
                        if (localPort.direction == NodePort.IO.Input)
                        {
                            List<XNode.NodePort> connections = localPort.GetConnections();
                        
                            foreach (XNode.NodePort connection in connections)
                            {
                                if (nodeMap.TryGetValue(connection.node, out Node connectedNode))
                                {
                                    DockOutput runtimeOutput = connectedNode.GetDockOutputByName(connection.fieldName);
                                    runtimeOutput.targets.Add(runtimeNode.GetDockInputByName(localPort.fieldName));
                                    runtimeNode.GetDockInputByName(localPort.fieldName).targets.Add(runtimeOutput);
                                }
                                else
                                {
                                    result++;
                                }
                            }
                        }
                    }
                }
                else
                {
                    result++;
                }
            }
            return result;
        }
    }
}